			System Spec — Stealth Zones (Dense Vegetation Camouflage)

> Canonical, standalone system document describing the global Stealth Zones mechanic for the world game. This is a world-level design and implementation spec — 
reusable across islands, regions and other maps.

	1. Purpose & high-level goals
* Provide a robust, predictable camouflage mechanic tied to vegetation density and similar environmental cover that supports stealth playstyles, ambush design, and 
profession interactions (scouts, hunters, rogues, etc.).
* Must be data-driven so it can be tuned per-region (e.g., dense jungle vs sparse brush).
* Avoid full invisibility: this system reduces detection probability and effective detection ranges, and lowers noise from player actions, but does not grant 
absolute concealment.

---

	2. Player-facing behavior
* Entering a region cell tagged as a Stealth Zone (vegetationDensity >= threshold) grants the "Camouflaged" state.
* Camouflaged players have reduced detection radius by NPCs and reduced noise output for actions.
* Camouflage breaks immediately on offensive actions (attacks, damaging abilities), heavy tools (loud mining), sprinting above a speed threshold, or using specific 
reveal abilities.
* Camouflage can reapply after a short cooldown if player re-enters eligible vegetation or remains stationary inside it.

---

	3. Concrete rules, formulas & tunables
	All tunables must be data-driven and set in a configuration system. Values below are recommended defaults.

	3.1 Vegetation mapping
* Each nav cell/node (or nav-mesh region) has `vegetationDensity` ∈ \[0..1].
* Global default `VEGETATION_THRESHOLD = 0.60` (cells with density >= threshold are candidate Stealth Zones).
* A secondary per-zone override can adjust threshold or add explicit `StealthZone` tags for special cases.

	3.2 Camouflage application
* Condition: `if (vegetationDensity >= VEGETATION_THRESHOLD) then apply Camouflaged`.
* Camouflaged server state includes: `startTime`, `sourceZoneId`, `lastNoiseTimestamp`.

	3.3 Detection radius reduction (sight)
* Normal mob detection radius: `R_base`.
* Effective detection radius while camouflaged: `R_eff = R_base * (1 - CAMO_SIGHT_REDUCTION)`.
* Recommended default: `CAMO_SIGHT_REDUCTION = 0.60` (R\_eff = 40% of R\_base).
* Elite/High-Rank mobs: `CAMO_SIGHT_REDUCTION_ELITE = 0.40` (R\_eff = 60% of R\_base).

	3.4 Noise multiplier (auditory)
* Each player action has a `noiseMagnitude` (see Linked Aggro spec).
* While camouflaged, noise is multiplied by `CAMO_NOISE_MULTIPLIER`. Recommended default: `0.20` (80% noise reduction).

	3.5 Movement & speed limits
* Camouflage is maintained only while player speed <= `WALK_SPEED * CAMO_SPEED_FACTOR`.
* Recommended `CAMO_SPEED_FACTOR = 1.25` (sprinting breaks camouflage).

	3.6 Reapply and cooldown
* Camouflage reapplication cooldown after breaking: `REAPPLY_COOLDOWN = 3s`.
* If player remains stationary for `CAMO_STILL_TIME = 2s` inside vegetation, camo reapplies instantly after cooldown.

	3.7 Visibility modifiers stacking
* Other environmental modifiers (fog, night) stack multiplicatively on sight reduction.
* Example: `R_eff_total = R_base * (1 - CAMO_SIGHT_REDUCTION) * (1 - FOG_REDUCTION)`.

---

	4. Server responsibilities (authoritative)
* Evaluate `vegetationDensity` and apply/remove Camouflaged state for players.
* Compute per-mob detection checks using `R_eff` and noise contributions.
* Enforce break conditions: attacks, revealed abilities, mining/gathering noise thresholds, sprinting.
* Emit events: `CamouflageApplied`, `CamouflageBroken` with reasons for analytics and client FX.
* Store timestamps for analytics (average camo duration, break causes).

---

	5. Client responsibilities (feedback & prediction)
* Display small buff icon (leaf) and tooltip while camouflaged.
* Play subtle client-side FX (leaf shimmer, muted footsteps) and a "rustle" FX when camouflage breaks.
* Predict camo state instantly to reduce input lag; reconcile with authoritative server state when updates arrive.
* Local ghosts/silhouette effect for self and teammates to indicate camo (non-gameplay affecting; purely visual).

---

	6. Interaction with other systems
* Linked Aggro : Apply `CAMO_NOISE_MULTIPLIER` to noise events generated by camouflaged players.
* Stealth Abilities / Items : Skills can modify camo properties (e.g., improved camoSightReduction, silent-gather boots that lower noise further). All modifications
must be additive/multiplicative via config.
* Day/Night & Fog : Environmental modifiers multiply with camo sight reduction.
* World Chests & Event Spawns : Camouflage should not prevent opening chests, but opening counts as a revealing action (breaks camo).

---

	7. UI & UX details
* Buff icon (leaf) appears at top-right of action bar with duration and tooltip explaining break conditions.
* On break: short audio cue and a small particle animation, and the icon flashes briefly.
* Optional: small stealth meter near minimap showing vegetationDensity of current cell.

---

	8. Data model & config examples
	
```
Player.camouflageState = { isCamouflaged:bool, sourceZone:string, startTime:timestamp, lastBreakReason:string }
NavCell = { id, vegetationDensity:float }
StealthConfig.global = { VEGETATION_THRESHOLD:0.6, CAMO_SIGHT_REDUCTION:0.6, CAMO_SIGHT_REDUCTION_ELITE:0.4, CAMO_NOISE_MULTIPLIER:0.2, CAMO_SPEED_FACTOR:1.25, REAPPLY_COOLDOWN:3, CAMO_STILL_TIME:2 }
```

Per-zone overrides example:

```
StealthConfig.zonePresets["Arliton/JungleCore"] = { VEGETATION_THRESHOLD:0.55, CAMO_SIGHT_REDUCTION:0.65 }
```

---

	9. Balancing & sample values (starting points)
* VEGETATION\_THRESHOLD = 0.60
* CAMO\_SIGHT\_REDUCTION = 0.60
* CAMO\_SIGHT\_REDUCTION\_ELITE = 0.40
* CAMO\_NOISE\_MULTIPLIER = 0.20
* CAMO\_SPEED\_FACTOR = 1.25
* REAPPLY\_COOLDOWN = 3s
* CAMO\_STILL\_TIME = 2s

	Design note: these are starting values. Monitoring how players use stealth (analytics) should guide tuning.

---

	10. QA / test cases
* Enter a stealth zone and ensure "Camouflaged" applies within 0.5s.
* Attack while camouflaged and confirm immediate break and server reconciliation.
* Use a noisy action while camouflaged (e.g., heavy mining) and verify camo breaks as configured.
* Test reapply cooldowns and reentry into multiple adjacent stealth cells.
* Test combined modifiers (fog + camo) reduce detection as expected.

---

	11. Analytics & telemetry
* `camouflage_apply_count`, `avg_camouflage_duration`, `camouflage_break_reasons`, `camouflage_usage_by_zone`.
* Heatmaps for vegetationDensity vs. camouflage usage to guide zone tuning.

---

	12. Implementation notes & pitfalls
* VegetationDensity mapping must be created by level design tools and exported to server nav data.
* For performance, compute camouflage only when player enters/exits cells or when vegetationDensity changes (not every frame).
* Avoid granting full invisibility — the feature must be balanced and visible to players as "camouflage".
* Ensure elite mob flags reduce the effectiveness of camouflage.

---